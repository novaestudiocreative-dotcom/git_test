/**
 * Î©îÏù∏ Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Î™®Îìà
 * Í≤åÏãúÍ∏Ä Î™©Î°ù Î°úÎî©, ÌïÑÌÑ∞ÎßÅ, Î†åÎçîÎßÅÏùÑ Îã¥ÎãπÌï©ÎãàÎã§.
 */

class BlogApp {
  constructor() {
    this.postsGrid = document.getElementById("postsGrid");
    this.loading = document.getElementById("loading");
    this.noPosts = document.getElementById("noPosts");
    this.postsCount = document.getElementById("postsCount");
    this.categoryFilter = document.getElementById("categoryFilter");
    this.tagFilter = document.getElementById("tagFilter");
    this.clearFiltersBtn = document.getElementById("clearFilters");

    this.posts = [];
    this.filteredPosts = [];
    this.currentFilters = {
      category: "",
      tag: "",
    };

    this.init();
    console.log("üöÄ BlogApp Ï¥àÍ∏∞Ìôî ÏôÑÎ£å");
  }

  async init() {
    this.setupEventListeners();
    await this.loadPosts();
    this.setupSearchListener();
  }

  setupEventListeners() {
    // Ïπ¥ÌÖåÍ≥†Î¶¨ ÌïÑÌÑ∞
    if (this.categoryFilter) {
      this.categoryFilter.addEventListener("change", (e) => {
        this.currentFilters.category = e.target.value;
        this.applyFilters();
        console.log("üè∑Ô∏è Ïπ¥ÌÖåÍ≥†Î¶¨ ÌïÑÌÑ∞ Î≥ÄÍ≤Ω:", e.target.value);
      });
    }

    // ÌÉúÍ∑∏ ÌïÑÌÑ∞
    if (this.tagFilter) {
      this.tagFilter.addEventListener("change", (e) => {
        this.currentFilters.tag = e.target.value;
        this.applyFilters();
        console.log("üè∑Ô∏è ÌÉúÍ∑∏ ÌïÑÌÑ∞ Î≥ÄÍ≤Ω:", e.target.value);
      });
    }

    // ÌïÑÌÑ∞ Ï¥àÍ∏∞Ìôî
    if (this.clearFiltersBtn) {
      this.clearFiltersBtn.addEventListener("click", () => {
        this.clearAllFilters();
        console.log("üßπ Î™®Îì† ÌïÑÌÑ∞ Ï¥àÍ∏∞ÌôîÎê®");
      });
    }
  }

  setupSearchListener() {
    // Í≤ÄÏÉâ Í≤∞Í≥º Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà
    document.addEventListener("searchResults", (e) => {
      this.filteredPosts = e.detail.posts;
      this.renderPosts();
      console.log("üîç Í≤ÄÏÉâ Í≤∞Í≥º Î∞òÏòÅÎê®:", this.filteredPosts.length, "Í∞ú");
    });
  }

  async loadPosts() {
    try {
      this.showLoading(true);
      console.log("üìù Í≤åÏãúÍ∏Ä Îç∞Ïù¥ÌÑ∞ Î°úÎî© ÏãúÏûë");

      const response = await fetch("posts.json");
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      this.posts = await response.json();
      this.filteredPosts = [...this.posts];

      console.log("üìù Í≤åÏãúÍ∏Ä Îç∞Ïù¥ÌÑ∞ Î°úÎî© ÏôÑÎ£å:", this.posts.length, "Í∞ú");

      // Í≤ÄÏÉâ Îß§ÎãàÏ†ÄÏóê Í≤åÏãúÍ∏Ä Îç∞Ïù¥ÌÑ∞ ÏÑ§Ï†ï
      if (window.searchManager) {
        window.searchManager.setPosts(this.posts);
      }

      this.populateFilters();
      this.renderPosts();
      this.showLoading(false);
    } catch (error) {
      console.error("‚ùå Í≤åÏãúÍ∏Ä Î°úÎî© Ïã§Ìå®:", error);
      this.showError("Í≤åÏãúÍ∏ÄÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.");
      this.showLoading(false);
    }
  }

  populateFilters() {
    // Ïπ¥ÌÖåÍ≥†Î¶¨ ÌïÑÌÑ∞ Ï±ÑÏö∞Í∏∞
    if (this.categoryFilter) {
      const categories = [
        ...new Set(this.posts.map((post) => post.category).filter(Boolean)),
      ];
      this.categoryFilter.innerHTML =
        '<option value="">Ï†ÑÏ≤¥</option>' +
        categories
          .map((category) => `<option value="${category}">${category}</option>`)
          .join("");
    }

    // ÌÉúÍ∑∏ ÌïÑÌÑ∞ Ï±ÑÏö∞Í∏∞
    if (this.tagFilter) {
      const allTags = this.posts
        .flatMap((post) => post.tags || [])
        .filter(Boolean);
      const uniqueTags = [...new Set(allTags)];
      this.tagFilter.innerHTML =
        '<option value="">Ï†ÑÏ≤¥</option>' +
        uniqueTags
          .map((tag) => `<option value="${tag}">${tag}</option>`)
          .join("");
    }

    console.log("üè∑Ô∏è ÌïÑÌÑ∞ ÏòµÏÖò ÏÉùÏÑ± ÏôÑÎ£å");
  }

  applyFilters() {
    let filtered = [...this.posts];

    // Ïπ¥ÌÖåÍ≥†Î¶¨ ÌïÑÌÑ∞ Ï†ÅÏö©
    if (this.currentFilters.category) {
      filtered = filtered.filter(
        (post) => post.category === this.currentFilters.category
      );
    }

    // ÌÉúÍ∑∏ ÌïÑÌÑ∞ Ï†ÅÏö©
    if (this.currentFilters.tag) {
      filtered = filtered.filter(
        (post) => post.tags && post.tags.includes(this.currentFilters.tag)
      );
    }

    this.filteredPosts = filtered;
    this.renderPosts();
    console.log(
      "üè∑Ô∏è ÌïÑÌÑ∞ Ï†ÅÏö©Îê®:",
      this.currentFilters,
      "-",
      filtered.length,
      "Í∞ú Í≤∞Í≥º"
    );
  }

  clearAllFilters() {
    this.currentFilters = { category: "", tag: "" };

    if (this.categoryFilter) {
      this.categoryFilter.value = "";
    }
    if (this.tagFilter) {
      this.tagFilter.value = "";
    }

    this.filteredPosts = [...this.posts];
    this.renderPosts();

    // Í≤ÄÏÉâÎèÑ Ï¥àÍ∏∞Ìôî
    if (window.searchManager) {
      window.searchManager.clearSearch();
    }
  }

  renderPosts() {
    if (!this.postsGrid) return;

    // Í≤åÏãúÍ∏Ä Í∞úÏàò ÏóÖÎç∞Ïù¥Ìä∏
    if (this.postsCount) {
      this.postsCount.textContent = this.filteredPosts.length;
    }

    // Í≤åÏãúÍ∏ÄÏù¥ ÏóÜÎäî Í≤ΩÏö∞
    if (this.filteredPosts.length === 0) {
      this.postsGrid.innerHTML = "";
      this.showNoPosts(true);
      return;
    }

    this.showNoPosts(false);

    // Í≤åÏãúÍ∏Ä Ïπ¥Îìú ÏÉùÏÑ±
    const postsHTML = this.filteredPosts
      .map((post) => this.createPostCard(post))
      .join("");
    this.postsGrid.innerHTML = postsHTML;

    console.log("üìù Í≤åÏãúÍ∏Ä Î†åÎçîÎßÅ ÏôÑÎ£å:", this.filteredPosts.length, "Í∞ú");
  }

  createPostCard(post) {
    const date = new Date(post.date);
    const formattedDate = date.toLocaleDateString("ko-KR", {
      year: "numeric",
      month: "long",
      day: "numeric",
    });

    const tagsHTML = post.tags
      ? post.tags.map((tag) => `<span class="post-tag">${tag}</span>`).join("")
      : "";

    return `
      <a href="post.html?slug=${post.slug}" class="post-card">
        <h3 class="post-card-title">${post.title}</h3>
        <p class="post-card-description">${post.description || ""}</p>
        <div class="post-card-meta">
          <span class="post-card-date">${formattedDate}</span>
          <div class="post-card-tags">${tagsHTML}</div>
        </div>
      </a>
    `;
  }

  showLoading(show) {
    if (this.loading) {
      this.loading.style.display = show ? "flex" : "none";
    }
  }

  showNoPosts(show) {
    if (this.noPosts) {
      this.noPosts.style.display = show ? "block" : "none";
    }
  }

  showError(message) {
    if (this.postsGrid) {
      this.postsGrid.innerHTML = `
        <div class="error-message">
          <h2>Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§</h2>
          <p>${message}</p>
        </div>
      `;
    }
    console.error("‚ùå ÏóêÎü¨ Î©îÏãúÏßÄ ÌëúÏãú:", message);
  }
}

// DOMÏù¥ Î°úÎìúÎêòÎ©¥ Î∏îÎ°úÍ∑∏ Ïï± Ï¥àÍ∏∞Ìôî
document.addEventListener("DOMContentLoaded", () => {
  new BlogApp();
});
